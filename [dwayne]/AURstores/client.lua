foodPanel = {    button = {},    staticimage = {},    label = {}}function centerWindows ( theWindow )	local screenW,screenH=guiGetScreenSize()	local windowW,windowH=guiGetSize(theWindow,false)	local x,y = (screenW-windowW)/2,(screenH-windowH)/1.5	guiSetPosition(theWindow,x,y,false)end--foodPanel.staticimage[1] = guiCreateStaticImage(156, 168, 489, 228, "Images/background.png", false)foodPanel.staticimage[1] = guiCreateWindow(156, 127, 475, 265, "AUR ~ Food store", false)guiWindowSetSizable(foodPanel.staticimage[1], false)centerWindows(foodPanel.staticimage[1])guiSetVisible(foodPanel.staticimage[1],false)foodPanel.staticimage[2] = guiCreateStaticImage(46, 57, 76, 60, "Images/burger.png", false, foodPanel.staticimage[1])foodPanel.staticimage[3] = guiCreateStaticImage(144, 57, 75, 60, "Images/salad.png", false, foodPanel.staticimage[1])foodPanel.staticimage[4] = guiCreateStaticImage(253, 57, 85, 60, "Images/coke.png", false, foodPanel.staticimage[1])foodPanel.staticimage[5] = guiCreateStaticImage(369, 57, 80, 60, "Images/fries.png", false, foodPanel.staticimage[1])--foodPanel.label[1] = guiCreateLabel(289, 178, 211, 50, "Welcome to our shop", false,foodPanel.staticimage[1])foodPanel.label[1] = guiCreateLabel(80, 20, 311, 50, "Welcome to our shop", false,foodPanel.staticimage[1])guiSetFont(foodPanel.label[1], "sa-header")foodPanel.label[2] = guiCreateLabel(36, 123, 90, 20, "Item price : $ 0", false, foodPanel.staticimage[1])guiSetFont(foodPanel.label[2], "default-bold-small")guiLabelSetColor(foodPanel.label[2], 251, 195, 2)foodPanel.label[3] = guiCreateLabel(139, 123, 90, 20, "Item price : $ 0", false, foodPanel.staticimage[1])guiSetFont(foodPanel.label[3], "default-bold-small")guiLabelSetColor(foodPanel.label[3], 251, 195, 2)foodPanel.label[4] = guiCreateLabel(253, 123, 90, 20, "Item price : $ 0", false, foodPanel.staticimage[1])guiSetFont(foodPanel.label[4], "default-bold-small")guiLabelSetColor(foodPanel.label[4], 251, 195, 2)foodPanel.label[5] = guiCreateLabel(363, 123, 90, 20, "Item price : $ 0", false, foodPanel.staticimage[1])guiSetFont(foodPanel.label[5], "default-bold-small")guiLabelSetColor(foodPanel.label[5], 251, 195, 2)foodPanel.button[1] = guiCreateButton(170, 186, 134, 32, "No thx", false, foodPanel.staticimage[1])guiSetProperty(foodPanel.button[1], "NormalTextColour", "FFAAAAAA")foodPanel.label[6] = guiCreateLabel(140, 156, 197, 20, "Click on item to buy", false, foodPanel.staticimage[1])guiSetFont(foodPanel.label[6], "default-bold-small")guiLabelSetColor(foodPanel.label[6], 251, 195, 2)guiLabelSetHorizontalAlign(foodPanel.label[1], "center", false)guiLabelSetHorizontalAlign(foodPanel.label[2], "center", false)guiLabelSetHorizontalAlign(foodPanel.label[3], "center", false)guiLabelSetHorizontalAlign(foodPanel.label[4], "center", false)guiLabelSetHorizontalAlign(foodPanel.label[5], "center", false)guiLabelSetHorizontalAlign(foodPanel.label[6], "center", false)addEventHandler("onClientMouseEnter",root,function()	if source == foodPanel.staticimage[2] or source == foodPanel.staticimage[3] or source == foodPanel.staticimage[4] or source == foodPanel.staticimage[5] then		guiSetAlpha(source,0.36)	endend)addEventHandler("onClientMouseLeave",root,function()	if source == foodPanel.staticimage[2] or source == foodPanel.staticimage[3] or source == foodPanel.staticimage[4] or source == foodPanel.staticimage[5] then		guiSetAlpha(source,1)	endend)myTable = {};function getTable( req )    if ( myTable[ req ] ) then        return myTable[ req ];    end    return false;endmyTable['interiors'] = {	{ out=false, name="Burger King", interiorX=363.11, interiorY=-74.88, interiorZ=1000.55, exteriorX=811.982, exteriorY=-1616.02, exteriorZ=12.618, exteriorRot=270, interiorDim=0, interiorInt=10 },	{ out=false, name="Burger King", interiorX=363.11, interiorY=-74.88, interiorZ=1000.55, exteriorX=1199.13, exteriorY=-918.071, exteriorZ=42.3243, exteriorRot=180, interiorDim=1, interiorInt=10 },	{ out=false, name="Burger King", interiorX=363.11, interiorY=-74.88, interiorZ=1000.55, exteriorX=-1912.27, exteriorY=828.025, exteriorZ=34.5615, exteriorRot=305, interiorDim=2, interiorInt=10 },	{ out=false, name="Burger King", interiorX=363.11, interiorY=-74.88, interiorZ=1000.55, exteriorX=-2336.95, exteriorY=-166.646, exteriorZ=34.3573, exteriorRot=270, interiorDim=3, interiorInt=10 },	{ out=false, name="Burger King", interiorX=363.11, interiorY=-74.88, interiorZ=1000.55, exteriorX=-2356.48, exteriorY=1008.01, exteriorZ=49.9036, exteriorRot=90, interiorDim=4, interiorInt=10 },	{ out=false, name="Burger King", interiorX=363.11, interiorY=-74.88, interiorZ=1000.55, exteriorX=2366.74, exteriorY=2071.02, exteriorZ=9.8218, exteriorRot=90, interiorDim=5, interiorInt=10 },	{ out=false, name="Burger King", interiorX=363.11, interiorY=-74.88, interiorZ=1000.55, exteriorX=2472.68, exteriorY=2033.88, exteriorZ=9.822	, exteriorRot=90, interiorDim=6, interiorInt=10 },	{ out=false, name="Burger King", interiorX=363.11, interiorY=-74.88, interiorZ=1000.55, exteriorX=2169.86, exteriorY=2795.79, exteriorZ=9.89528, exteriorRot=270, interiorDim=7, interiorInt=10 },	{ out=false, name="Burger King", interiorX=363.11, interiorY=-74.88, interiorZ=1000.55, exteriorX=1872.24, exteriorY=2072.07, exteriorZ=9.82222, exteriorRot=270, interiorDim=8, interiorInt=10 },	{ out=false, name="Burger King", interiorX=363.11, interiorY=-74.88, interiorZ=1000.55, exteriorX=1158.43, exteriorY=2072.02, exteriorZ=9.82222, exteriorRot=270, interiorDim=9, interiorInt=10 },	{ out=false, name="Cluckin Bell", interiorX=365.67, interiorY=-11.61, interiorZ=1000.87, exteriorX=-1213.71, exteriorY=1830.46, exteriorZ=40.9335, exteriorRot=315, interiorDim=2, interiorInt=9 },	{ out=false, name="Cluckin Bell", interiorX=365.67, interiorY=-11.61, interiorZ=1000.87, exteriorX=-1815.84, exteriorY=618.678, exteriorZ=34.2989, exteriorRot=180, interiorDim=7, interiorInt=9 },	{ out=false, name="Cluckin Bell", interiorX=365.67, interiorY=-11.61, interiorZ=1000.87, exteriorX=-2155.03, exteriorY=-2460.28, exteriorZ=29.8484, exteriorRot=235, interiorDim=3, interiorInt=9 },	{ out=false, name="Pizza", interiorX=372.35, interiorY=-133.55, interiorZ=1000.45, exteriorX=2333.43, exteriorY=75.0488, exteriorZ=25.7342, exteriorRot=270, interiorDim=2, interiorInt=5 },	{ out=false, name="Pizza", interiorX=372.35, interiorY=-133.55, interiorZ=1000.45, exteriorX=203.334, exteriorY=-202.532, exteriorZ=0.600709, exteriorRot=180, interiorDim=3, interiorInt=5 },	{ out=false, name="Pizza", interiorX=372.35, interiorY=-133.55, interiorZ=1000.45, exteriorX=2105.32, exteriorY=-1806.49, exteriorZ=12.6941, exteriorRot=90, interiorDim=4, interiorInt=5 },	{ out=false, name="Pizza", interiorX=372.35, interiorY=-133.55, interiorZ=1000.45, exteriorX=-1808.69, exteriorY=945.863, exteriorZ=23.8648, exteriorRot=225, interiorDim=5, interiorInt=5 },	{ out=false, name="Pizza", interiorX=372.35, interiorY=-133.55, interiorZ=1000.45, exteriorX=-1721.13, exteriorY=1359.01, exteriorZ=6.19634, exteriorRot=90, interiorDim=6, interiorInt=5 },}myTable['drivethru'] = {	{x=2378.2, y=2019.94, z=9.82,name="Chicken"},	{x=-1811.82,y= 614.98, z=34.17,name="Chicken"},	{x=-2663.92, y=262.49, z=3.33,name="Chicken"},	{x=-2163.9, y=-2461.27,z= 29.62 ,name="Chicken"},	{x=-1210, y=1841.46,z= 40.71 ,name="Chicken"},	{x=171.14, y=1181.25, z=13.75,name="Chicken"},	{x=951.23, y=-1376.59, z=12.34 ,name="Chicken"},	{x=2377.44, y=-1908.82, z=12.38,name="Chicken"},	{x=2409.38, y=-1488.94,z= 22.82,name="Chicken"},	{x=2486.19, y=2021.92, z=9.82 ,name="Burger"},	{x=1859.19, y=2082.29, z=9.82,name="Burger"},	{x=1167.51, y=2082.78, z=9.82,name="Burger"},	{x=-2345.53, y=1023.93,z= 49.69,name="Burger"},	{x=-2352.66, y=-155.04,z= 34.32,name="Burger"},	{x=1212.41, y=-904.42, z=41.92,name="Burger"},	{x=799.31, y=-1629.13, z=12.38,name="Burger"},	{x=2632.54, y=1842.63,z= 9.82,name="Pizza"},	{x=2371.04, y=2533.82,z= 9.82,name="Pizza"},	{x=199.69, y=-172.01,z= 0.57,name="Pizza"},	{x=1374.86, y=268.72, z=18.56,name="Pizza"},	{x=2328.19, y=84.55, z=25.48,name="Pizza"},	{x=2108.61, y=-1784.78, z=12.38,name="Pizza"},}myTable['foodstores'] = {    --SF Chicken    { x = 369.643, y = -6.548, Z = 1001.859, int = 9, dim = 7, model = 167, px = 369.595, py = -4.492, pz = 1001.859, pr = 181.181, tp = "Chicken" },    { x = 369.638, y = -6.548, Z = 1001.859, int = 9, dim = 6, model = 167, px = 369.595, py = -4.492, pz = 1001.859, pr = 181.181, tp = "Chicken" },    --LV Chicken    { x = 2645.26,y=1666.65,Z=11.03, int = 0, dim = 0, model = 167, px = 369.603, py= -4.492, pz = 1001.859, pr = 180.143, tp = "Chicken" },    { x = 2387.52,y=2034.89,Z=10.94, int = 0, dim = 0, model = 167, px = 369.603, py= -4.492, pz = 1001.859, pr = 180.143, tp = "Chicken" },    { x = 2837.41,y=2416.39,Z=11.09, int = 0, dim = 0, model = 167, px = 369.603, py= -4.492, pz = 1001.859, pr = 180.143, tp = "Chicken" },    --LS Chicken    { x = 2413.29, y = -1504.28,Z = 24, int = 0, dim = 0, model = 167, px = 369.603, py = -4.492, pz = 1001.859, pr = 180.143, tp = "Chicken" },    { x = 2392.73,y=-1905.86,Z=13.56, int = 0, dim = 0, model = 167, px = 369.603, py = -4.492, pz = 1001.859, pr = 180.143, tp = "Chicken" },    { x = 935.54,y=-1357.42,Z=13.35, int = 0, dim =0, model = 167, px = 369.603, py = -4.492, pz = 1001.859, pr = 180.143, tp = "Chicken" },    --LV Burger    { x = 377.705, y = -67.9, Z = 1001.515, int = 10, dim = 9, model = 205, px = 377.677, py = -65.849, pz = 1001.508, pr = 180.555, tp = "Burger" },    { x = 377.705, y = -67.9, Z = 1001.515, int = 10, dim = 8, model = 205, px = 377.677, py = -65.849, pz = 1001.508, pr = 180.555, tp = "Burger" },    { x = 377.705, y = -67.9, Z = 1001.515, int = 10, dim = 7, model = 205, px = 377.677, py = -65.849, pz = 1001.508, pr = 180.555, tp = "Burger" },    { x = 377.705, y = -67.9, Z = 1001.515, int = 10, dim = 6, model = 205, px = 377.677, py = -65.849, pz = 1001.508, pr = 180.555, tp = "Burger" },    { x = 377.705, y = -67.9, Z = 1001.515, int = 10, dim = 5, model = 205, px = 377.677, py = -65.849, pz = 1001.508, pr = 180.555, tp = "Burger" },    --SF Burger    { x = 377.705, y = -67.9, Z = 1001.515, int = 10, dim = 4, model = 205, px = 377.677, py = -65.849, pz = 1001.508, pr = 180.555, tp = "Burger" },    { x = 377.705, y = -67.9, Z = 1001.515, int = 10, dim = 3, model = 205, px = 377.677, py = -65.849, pz = 1001.508, pr = 180.555, tp = "Burger" },    { x = 377.705, y = -67.9, Z = 1001.515, int = 10, dim = 2, model = 205, px = 377.677, py = -65.849, pz = 1001.508, pr = 180.555, tp = "Burger" },    --LS Burger    { x = 377.705, y = -67.9, Z = 1001.515, int = 10, dim = 1, model = 205, px = 377.677, py = -65.849, pz = 1001.508, pr = 180.555, tp = "Burger" },    { x = 377.705, y = -67.9, Z = 1001.515, int = 10, dim = 0, model = 205, px = 377.677, py = -65.849, pz = 1001.508, pr = 180.555, tp = "Burger" },    --LV Pizza    { x = 2770.24,y=2485.93,Z=11.09,int = 0, dim = 0, model = 155, px = 373.681, py = -117.278, pz = 1001.5, pr = 179.434, tp = "Pizza" },    { x = 2355.44,y=2548.86,Z=10.83,int = 0, dim = 0, model = 155, px = 373.681, py = -117.278, pz = 1001.5, pr = 179.434, tp = "Pizza" },    --SF Pizza    { x = 373.712, y = -119.301, Z = 1001.492, int = 5, dim = 7, model = 155, px = 373.681, py = -117.278, pz = 1001.5, pr = 179.434, tp = "Pizza" },    { x = 373.712, y = -119.301, Z = 1001.492, int = 5, dim = 6, model = 155, px = 373.681, py = -117.278, pz = 1001.5, pr = 179.434, tp = "Pizza" },    --LS Pizza    { x = 2121.27,y=-1810.17,Z=13.56, int = 0, dim = 0, model = 155, px = 373.681, py = -117.278, pz = 1001.5, pr = 179.434, tp = "Pizza" },}function onMarkerHit (player, md)	if not ( isElement ( player ) ) or ( getElementType ( player ) ~= "player" ) then return end	if ( player ~= localPlayer ) then return end	if ( not md ) or ( isPedInVehicle ( player ) ) or ( doesPedHaveJetPack ( player ) ) or ( not isPedOnGround ( player ) ) or ( getControlState ( "aim_weapon" ) ) or ( blockPlayer ) then return end	if not ( getElementData( localPlayer, "isPlayerInInterior" ) ) then		if getElementData(localPlayer,"isPlayerArrested") then return false end		local x, y, z, int, dim, intName  = getElementData( source, "x" ), getElementData( source, "y" ), getElementData( source, "z" ), getElementData( source, "int" ), getElementData( source, "dim" ), getElementData(source, "intName")		local wx, wy, wz = getElementPosition ( source )		toggleAllControls ( false, true, false )		fadeCamera ( false, 1.0 )		setTimer ( setPlayerInsideInterior, 1000, 1, localPlayer,  int, dim, x, y, z, wx, wy, wz , intName)		blockPlayer = true		setTimer ( function() blockPlayer = nil end, 3500, 1 )	else		local x, y, z, rot = getElementData( source, "x" ), getElementData( source, "y" ), getElementData( source, "z" ), getElementData( source, "rot" )		toggleAllControls ( false, true, false )		fadeCamera ( false, 1.0 )		setTimer ( setPlayerOutsideInterior, 1000, 1,localPlayer, rot, x, y, z )		blockPlayer = true		setTimer ( function() blockPlayer = nil end, 3500, 1 )	endendfunction setPlayerInsideInterior ( player, int, dim, x, y, z, wx, wy, wz, intName )	setElementData( player, "isPlayerInInterior", true )	setElementData( player, "playerInteriorName", intName )	setElementData( player, "playerPositionOnWorldX", wx )	setElementData( player, "playerPositionOnWorldY", wy )	local wx,wy,wz = getElementPosition(player)	triggerServerEvent("setPlayerPosition",player,int,dim,x,y,z,"in",wx,wy,wz)	setCameraInterior ( int )	setTimer ( function(p) if ( isElement(p) ) then setCameraTarget(p) end end, 200,1, player )	setElementPosition ( player, x, y, z+1 )	toggleAllControls( true, true, true )	setTimer ( fadeCamera, 500, 1, true, 1.0 )	ghostmode(true)	for i=1,12 do		setWeaponSlotDisabled(i,true)	endendfunction setPlayerOutsideInterior ( player, rot, x, y, z )	setElementData( player, "isPlayerInInterior", false )	setElementData( player, "playerInteriorName", false )	setElementData( player, "playerPositionOnWorldX", false )	setElementData( player, "playerPositionOnWorldY", false )	triggerServerEvent("setPlayerPosition",player,0,0,x,y,z,"out",0,0,0)	setCameraInterior ( 0 )	setTimer ( function(p) if ( isElement(p) ) then setCameraTarget(p) end end, 200,1, player )	setElementRotation ( player, 0, 0, rot )	toggleAllControls( true, true, true )	setTimer ( fadeCamera, 500, 1, true, 1.0 )	ghostmode(false)	toggleControl("fire",true)	toggleControl("aim_weapon",true)endproTimer = {}addEventHandler("onClientPlayerSpawn",root,function()	if source == localPlayer then		proTimer[source] = setTimer(function()			if getElementInterior(localPlayer) == 9 or getElementInterior(localPlayer) == 9 or getElementInterior(localPlayer) == 10 then				ghostmode(true)			end		end,3000,1)	endend)--isPlayerInInteriorfunction ghostmode(state)	if state == true then		for index,player in ipairs(getElementsByType("player")) do --LOOP through all Vehicles			setElementCollidableWith(player, localPlayer, false) -- Set the Collison off with the Other vehicles.		end	else		for index,player in ipairs(getElementsByType("player")) do --LOOP through all Vehicles			setElementCollidableWith(player, localPlayer,true) -- Set the Collison off with the Other vehicles.		end	endendfunction onPlayerDead ()	if ( source ~= localPlayer ) then return end	setElementData( source, "isPlayerInInterior", false )	setElementData( source, "playerInteriorName", false )	setElementData( source, "playerPositionOnWorldX", false )	setElementData( source, "playerPositionOnWorldY", false )	toggleAllControls( true, true, true )endaddEventHandler ( "onClientPlayerWasted", root, onPlayerDead )local blipped = {}function createWarps ()	local interiors = getTable('interiors')	for i=1, #interiors do		local out,name, eX, eY, eZ, eRot, iX, iY, iZ, dim, int = interiors[i].out,interiors[i].name, interiors[i].exteriorX, interiors[i].exteriorY, interiors[i].exteriorZ, interiors[i].exteriorRot, interiors[i].interiorX, interiors[i].interiorY, interiors[i].interiorZ, interiors[i].interiorDim, interiors[i].interiorInt		if name == "Pizza" then			blipName = 29		elseif name == "Cluckin Bell" then			blipName = 14		elseif name == "Burger King" then			blipName = 10		end		blips = createBlip ( eX, eY, eZ, blipName, 2, 0, 0, 0, 0, 0, 300 )		table.insert( blipped, blips )		if out == true then return end		local exteriorMarker = createMarker(eX, eY, eZ+2.2, "arrow", 2, 255, 80, 0, 200)		setElementData(exteriorMarker, "x", iX)		setElementData(exteriorMarker, "y", iY)		setElementData(exteriorMarker, "z", iZ)		setElementData(exteriorMarker, "dim", dim)		setElementData(exteriorMarker, "int", int)		setElementData(exteriorMarker, "intName", name)		setElementData(exteriorMarker, "exteriorMarker",eZ)		addEventHandler("onClientMarkerHit", exteriorMarker, onMarkerHit)		local interiorMarker = createMarker(iX, iY, iZ+2.2, "arrow", 2, 255, 80, 0, 200)		setElementInterior(interiorMarker, int)		setElementDimension(interiorMarker, dim)		setElementData(interiorMarker, "x", eX)		setElementData(interiorMarker, "y", eY)		setElementData(interiorMarker, "z", eZ)		setElementData(interiorMarker, "rot", eRot)		addEventHandler("onClientMarkerHit", interiorMarker, onMarkerHit)	endendcreateWarps ()function create()	blipped = {}	local interiors = getTable('interiors')	for i=1, #interiors do		local name, eX, eY, eZ, eRot, iX, iY, iZ, dim, int = interiors[i].name, interiors[i].exteriorX, interiors[i].exteriorY, interiors[i].exteriorZ, interiors[i].exteriorRot, interiors[i].interiorX, interiors[i].interiorY, interiors[i].interiorZ, interiors[i].interiorDim, interiors[i].interiorInt		if name == "Pizza" then			blipName = 29		elseif name == "Cluckin Bell" then			blipName = 14		elseif name == "Burger King" then			blipName = 10		end		blips = createBlip ( eX, eY, eZ, blipName, 2, 0, 0, 0, 0, 0, 300 )		table.insert( blipped, blips )	endendlocal sx, sy = guiGetScreenSize()local storetypelocal isFoodStoreShowing = falselocal selectedItem = falselocal shopItems = {	{		{ "burger", 500, "burger.png" },		{ "salad", 250, "salad.png" },		{ "coke", 100, "coke.png" },		{ "fries", 50, "fries.png" },	},	{		{ "chicken", 500, "chicken.png"},		{ "salad", 250, "salad.png" },		{ "coke", 100, "coke.png" },		{ "fries", 50, "fries.png" },	},	{		{ "pizza", 500, "pizza.png" },		{ "salad", 250, "salad.png" },		{ "coke", 100, "coke.png" },		{ "fries",50, "fries.png" },	},}local positions = getTable('foodstores')local drivethru = getTable("drivethru")local markers = {}local markers2 = {}function onFoodMarkerHit( hitElement, matchingDimension )	if ( hitElement == localPlayer ) and ( matchingDimension ) then		local mx ,my, mz = getElementPosition( source ) -- marker		local hx, hy, hz = getElementPosition( localPlayer ) -- hitelement ( player/vehicle etc. )		if ( hz < mz + 2 ) then			if ( markers[ source ] == "Burger" ) then				setStoreWindowVisable ( "Burger King" )			elseif ( markers[ source ] == "Chicken" ) then				setStoreWindowVisable ( "Cluckin' Bell" )			elseif ( markers[ source ] == "Pizza" ) then				setStoreWindowVisable ( "Pizza Hot" )			end		end	endendfunction onFoodMarkerExit( hitElement, matchingDimension )	if hitElement == getLocalPlayer() then		isFoodStoreShowing = false		guiSetVisible(foodPanel.staticimage[1],false)		showCursor( false )		if isPedInVehicle(localPlayer) then			local vehicle = getPedOccupiedVehicle (localPlayer)			setElementFrozen(vehicle,false)			toggleAllControls( true, true, true )		end	endendfunction onDriveThruHit( hitElement, matchingDimension )	if ( hitElement == localPlayer ) and ( matchingDimension ) then		if isPedInVehicle(localPlayer) then			local vehicle = getPedOccupiedVehicle (localPlayer)			local mx ,my, mz = getElementPosition( source ) -- marker			local hx, hy, hz = getElementPosition( vehicle ) -- hitelement ( player/vehicle etc. )			if ( hz < mz + 2 ) then				if ( markers2[ source ] == "Burger" ) then					setStoreWindowVisable ( "Burger King" )				elseif ( markers2[ source ] == "Chicken" ) then					setStoreWindowVisable ( "Cluckin' Bell" )				elseif ( markers2[ source ] == "Pizza" ) then					setStoreWindowVisable ( "Pizza Hot" )				end				exports.NGCdxmsg:createNewDxMessage("This service expensive for the customers +10% on item price",255,0,0)				setElementFrozen(vehicle,true)			end		else			exports.NGCdxmsg:createNewDxMessage("This service only for vehicles!",255,0,0)		end	endendfunction onDriveThruExit( hitElement, matchingDimension )	if hitElement == getLocalPlayer() then		isFoodStoreShowing = false		guiSetVisible(foodPanel.staticimage[1],false)		showCursor( false )		if isPedInVehicle(localPlayer) then			local vehicle = getPedOccupiedVehicle (localPlayer)			setElementFrozen(vehicle,false)			toggleAllControls( true, true, true )		end	endendfor _, tbl in ipairs ( positions ) do	local theMarker = createMarker( tbl.x, tbl.y, tbl.Z-1, "cylinder", 1.0, 225, 0, 0,150 )	---local thePed = createPed( tbl.model, tbl.px, tbl.py, tbl.pz )	--setPedRotation(thePed,tbl.pr)	---setElementData(thePed,"showModelPed",true)	--if ( thePed ) and ( theMarker ) then	if ( theMarker ) then		if tbl.dim == 0 and tbl.int == 0 then			local name = tbl.tp			if name == "Pizza" then				blipName = 29			elseif name == "Chicken" then				blipName = 14			elseif name == "Burger" then				blipName = 10			end			local theblips = createBlip ( tbl.x, tbl.y, tbl.Z, blipName, 2, 0, 0, 0, 0, 0, 300 )			outputDebugString("creating blips")			table.insert( blipped, blips )		end		setElementDimension( theMarker, tbl.dim )		---setElementDimension( thePed, tbl.dim )		setElementInterior( theMarker, tbl.int )		---setElementInterior( thePed, tbl.int )		markers[ theMarker ] = tbl.tp		addEventHandler( "onClientMarkerHit", theMarker, onFoodMarkerHit )		addEventHandler( "onClientMarkerLeave", theMarker, onFoodMarkerExit )	endendfor _, tbl in ipairs ( drivethru ) do	local theMarkerx = createMarker( tbl.x, tbl.y, tbl.z, "cylinder", 2, 225, 0, 0,255 )	if  theMarkerx then		markers2[ theMarkerx ] = tbl.name		addEventHandler( "onClientMarkerHit", theMarkerx, onDriveThruHit )		addEventHandler( "onClientMarkerLeave", theMarkerx, onDriveThruExit )	endendfunction setStoreWindowVisable ( type )	if ( type == "Burger King" ) and not ( isFoodStoreShowing ) then		storetype = shopItems[1]		openPanel("Burger King")	elseif ( type == "Pizza Hot" ) and not ( isFoodStoreShowing ) then		storetype = shopItems[3]		openPanel("Pizza Hot")	elseif ( type == "Cluckin' Bell" ) and not ( isFoodStoreShowing ) then		storetype = shopItems[2]		openPanel("Cluckin Bell")	elseif not ( type ) then		isFoodStoreShowing = false		guiSetVisible(foodPanel.staticimage[1],false)		showCursor( false )	else		return false	endendfunction openPanel(name)	isFoodStoreShowing = true	guiSetVisible(foodPanel.staticimage[1],true)	showCursor( true )	k = 1	for k, tbl in ipairs( storetype ) do		k = k + 1		guiStaticImageLoadImage (foodPanel.staticimage[k],"Images/"..tbl[3])		guiSetText(foodPanel.label[k],"Price $"..tostring(tbl[2]))	end	guiSetText(foodPanel.label[1],"Welcome to "..name)endfunction isDrawElementSelected ( minX, minY, maxX, maxY )	if not ( isCursorShowing() ) then return end	local x, y = getCursorPosition()	if ( sx*x >= minX ) and ( sx*x <= maxX ) then		if ( sy*y >= minY ) and ( sy*y <= maxY ) then			return true		else			return false		end	else		return false	endendlocal timing = {}addEventHandler ( "onClientGUIClick", resourceRoot,	function ( button, state )		if source == foodPanel.button[1] then			if ( isFoodStoreShowing ) then				isFoodStoreShowing = false				guiSetVisible(foodPanel.staticimage[1],false)				showCursor( false )				if isPedInVehicle(localPlayer) then					local vehicle = getPedOccupiedVehicle (localPlayer)					setElementFrozen(vehicle,false)					toggleAllControls( true, true, true )				end			end		elseif source == foodPanel.staticimage[2] then			if timing[source] then return false end			timing[source] = true			setTimer(function(r) timing[r] = false end,1000,1,source)			triggerServerEvent( "onServerPlayerBoughtFood", localPlayer, "big" )		elseif source == foodPanel.staticimage[3] then			if timing[source] then return false end			timing[source] = true			setTimer(function(r) timing[r] = false end,1000,1,source)			triggerServerEvent( "onServerPlayerBoughtFood", localPlayer, "medium" )		elseif source == foodPanel.staticimage[4] then			if timing[source] then return false end			timing[source] = true			setTimer(function(r) timing[r] = false end,1000,1,source)			triggerServerEvent( "onServerPlayerBoughtFood", localPlayer, "small" )		elseif source == foodPanel.staticimage[5] then			if timing[source] then return false end			timing[source] = true			setTimer(function(r) timing[r] = false end,1000,1,source)			triggerServerEvent( "onServerPlayerBoughtFood", localPlayer, "snack" )		end	end)local blipswitch = function (blipstate)	if blipstate then	    for k,v in ipairs(blipped) do			if isElement(v) then destroyElement(v) end		end		create()	else    	for k,v in ipairs(blipped) do			if isElement(v) then destroyElement(v) end		end	endendaddEvent( "onPlayerSettingChange", true )addEventHandler( "onPlayerSettingChange", localPlayer,	function ( setting, blipstate )		if setting == "stores" then			blipswitch( blipstate )		end	end)function checkSettingblip()	if ( getResourceRootElement( getResourceFromName( "DENsettings" ) ) ) then		local setting = exports.DENsettings:getPlayerSetting( "stores" )		blipswitch( setting )	else		setTimer( checkSettingblip, 5000, 1 )	endendaddEventHandler( "onClientResourceStart", resourceRoot, checkSettingblip )weapons = {	[1] = {2, 4, 5, 6, 7, 8, 9},	[2] = {22, 23, 24},	[3] = {25, 26, 27},	[4] = {28, 29, 32},	[5] = {30, 31},	[6] = {33, 34},	[7] = {35, 36, 37,38},	[8] = {16, 17, 18, 39},	[9] = {41, 42, 43},	[10] = {10, 11, 12, 13, 14, 15},	[11] = {44, 45, 46},	[12] = {40},	[13] = {3},}restrictedWeapons = {}function onClientPreRender()	if getElementDimension(localPlayer) ~= 0 then		if getElementData(localPlayer,"isPlayerInInterior") then			if exports.DENlaw:isPlayerLawEnforcer(localPlayer) then				if getPedWeapon(localPlayer) == 3 then					toggleControl("fire",true)					toggleControl("aim_weapon",true)				else					toggleControl("fire",false)					toggleControl("aim_weapon",false)				end			else				toggleControl("fire",false)				toggleControl("aim_weapon",false)			end			local weapon = getPedWeapon(localPlayer)			local slot = getPedWeaponSlot(localPlayer)			if (restrictedWeapons[weapon]) then				local weapons = {}				for i=1, 30 do					if (getControlState("next_weapon")) then						slot = slot + 1					else						slot = slot - 1					end					if (slot == 14) then						slot = 0					elseif (slot == -1) then						slot = 13					end					local w = getPedWeapon(localPlayer, slot)					if (((w ~= 0 and slot ~= 0) or (w == 0 and slot == 0)) and not restrictedWeapons[w]) then						setPedWeaponSlot(localPlayer, slot)						break					end				end			end		end	endendaddEventHandler("onClientPreRender", root, onClientPreRender)function onClientPlayerWeaponFire(weapon)	if (restrictedWeapons[weapon]) then return endendaddEventHandler("onClientPlayerWeaponFire", localPlayer, onClientPlayerWeaponFire)function setWeaponDisabled(id, bool)	if (id == 0) then return end	restrictedWeapons[id] = boolendfunction isWeaponDisabled(id)	return restrictedWeapons[id]endfunction setWeaponSlotDisabled(slot, bool)	if (not weapons[slot]) then return end	for k, v in ipairs(weapons[slot]) do		setWeaponDisabled(v, bool)	endend